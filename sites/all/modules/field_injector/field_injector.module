<?php

/**
 * @file
 * Allows other fields to be injected into other text fields.
 */

/**
 * Implements hook_field_formatter_info_alter().
 */
function field_injector_field_formatter_info_alter(&$info) {
  foreach ($info as $formatter_key => &$formatter) {
    $formatter['settings'] += array(
      'field_injector_field' => '',
      'field_injector_position' => '',
    );
  }
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function field_injector_field_formatter_settings_summary_alter(&$summary, $context) {
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];

  if (!empty($summary)) {
    $summary .= '<br />';
  }

  if (!empty($settings['field_injector_field'])) {
    $summary .= t('Injected into @field', array('@field' => $settings['field_injector_field']));
  }
  else {
    $summary .= t('Not injected');
  }
}

/**
 * Implements hook_field_formatter_settings_form_alter().
 */
function field_injector_field_formatter_settings_form_alter(&$settings_form, $context) {
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];

  $field_options = drupal_map_assoc($context['form']['#fields']);
  $this_field_name = $context['field']['field_name'];
  $instances = field_info_instances($context['instance']['entity_type'], $context['instance']['bundle']);
  $field_options = array();
  foreach ($context['form']['#fields'] as $field_name) {
    if ($field_name == $this_field_name) {
      continue;
    }
    elseif ($instances[$field_name]['widget']['module'] != 'text') {
      continue;
    }
    $field_options[$field_name] = $instances[$field_name]['label'];
  }
  $settings_form['field_injector_field'] = array(
    '#type' => 'select',
    '#title' => t('Injection field'),
    '#options' => $field_options,
    '#default_value' => $settings['field_injector_field'],
    '#empty_value' => '',
  );

  $position_info = field_injector_get_position_info();
  $position_options = array();
  foreach (array_keys($position_info) as $position) {
    $position_options[$position] = $position_info[$position]['label'];
  }
  $settings_form['field_injector_position'] = array(
    '#type' => 'select',
    '#title' => t('Position in field'),
    '#options' => $position_options,
    '#default_value' => $settings['field_injector_position'],
    '#states' => array(
      'invisible' => array(
        'select[name="fields[' . $this_field_name . '][settings_edit_form][settings][field_injector_field]"]' => array('value' => ''),
      ),
    ),
  );
}

/**
 * Implements hook_field_attach_view_alter().
 *
 * Perform the injection callback if requested and hide the current field.
 */
function field_injector_field_attach_view_alter(&$output, $context) {
  $injection_info = field_injector_get_position_info();
  // Loop though each of the fields.
  foreach (element_children($output) as $field_name) {
    // Loop through each of the
    $info = field_injector_formatter_info($field_name, $output['#entity_type'], $output['#bundle'], $context['view_mode']);
    if (!empty($info['field_injector_field']) && !empty($info['field_injector_position'])) {
      $callback = $injection_info[$info['field_injector_position']]['process callback'];
      if (function_exists($callback)) {
        $callback($output[$field_name], $output[$info['field_injector_field']], $info);
        hide($output[$field_name]);
        $output[$field_name]['#injected'] = TRUE;
      }
    }
  }
}

/**
 * Implements hook_preprocess_field().
 */
function field_injector_preprocess_field(&$variables, $hook) {
  $element = $variables['element'];
  $info = field_injector_formatter_info($element['#field_name'], $element['#entity_type'], $element['#bundle'], $element['#view_mode']);
  if (!empty($info['field_injector_field']) && !empty($info['field_injector_position'])) {
    $variables['classes_array'][] = 'field-inline';
  }
}

/**
 * Get the formatter settings for a field instance and display.
 *
 * @param string $field_name
 * @param string $display
 * @param string $bundle
 * @param string $display
 *
 * @return array
 */
function field_injector_formatter_info($field_name, $entity_type, $bundle, $display) {
  $info =_field_info_collate_fields();
  // There is no bundle for this entity type so the bundle name in the
  // entity_type name.
  if (empty($bundle)) {
    $bundle = $entity_type;
  }

  $field_display = $info['instances'][$entity_type][$bundle][$field_name]['display'];
  $default = $field_display['default']['settings'];
  if (isset($field_display[$display]['settings'])) {
    return $field_display[$display]['settings'] + $default;
  }
  return $default;
}

/**
 * Implements hook_field_injector_position_info().
 */
function field_injector_field_injector_position_info() {  
  $info['beginning'] = array(
    'label' => t('Beginning'),
    'process callback' => 'field_injector_process',
  );
  
  foreach (range(1, 6) as $i) {
    $info['before_paragraph_' . $i] = array(
      'label' => t('Before paragraph @number', array('@number' => $i)),
      'process callback' => 'field_injector_process_paragraph',
    );
  }
  return $info;
}

function field_injector_get_position_info() {
  $info = module_invoke_all('field_injector_position_info');
  drupal_alter('field_injector_position_info', $info);
  return $info;
}

/**
 * Process callback for injecting into a field's paragraphs.
 */
function field_injector_process_paragraph(&$injected_field, &$injector_field, $info) {
  $i = substr($info['field_injector_position'], -1) - 1;
  $paragraphs = explode('</p>', $injector_field[0]['#markup']);
  $number_of_actual_paragraphs = count($paragraphs) - 2;
  
  $rendered_field = drupal_render($injected_field);
    
  if ( $i > $number_of_actual_paragraphs) {
    $i = $number_of_actual_paragraphs;
  }

  $paragraphs[$i] = str_replace('<p>', $rendered_field . '<p>', $paragraphs[$i]);
  $rendered_field = drupal_render($injected_field);
  array_splice($paragraphs, $i, 0, $rendered_field);
  $injector_field[0]['#markup'] = implode('</p>', $paragraphs);
}
